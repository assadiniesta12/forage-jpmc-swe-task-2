From 3022e1f02670f8336f457078532f98c50f77496e Mon Sep 17 00:00:00 2001
From: Joe Ferrer <joe@theforage.com>
Date: Wed, 1 Mar 2023 00:45:20 +1100
Subject: [PATCH 1/2] Move python files to datafeed dir

---
 requirements.txt => datafeed/requirements.txt | 0
 server.py => datafeed/server3.py              | 0
 datafeed/test.csv                             | 0
 3 files changed, 0 insertions(+), 0 deletions(-)
 rename requirements.txt => datafeed/requirements.txt (100%)
 rename server.py => datafeed/server3.py (100%)
 create mode 100644 datafeed/test.csv

diff --git a/requirements.txt b/datafeed/requirements.txt
similarity index 100%
rename from requirements.txt
rename to datafeed/requirements.txt
diff --git a/server.py b/datafeed/server3.py
similarity index 100%
rename from server.py
rename to datafeed/server3.py
diff --git a/datafeed/test.csv b/datafeed/test.csv
new file mode 100644
index 0000000..e69de29
-- 
2.39.3 (Apple Git-146)


From 73173cf6f232241922784f823e1fac31de16693d Mon Sep 17 00:00:00 2001
From: Assad Farid <assad.farid28@icloud.com>
Date: Wed, 17 Jul 2024 20:25:48 +0100
Subject: [PATCH 2/2] 1st Commit

---
 src/App.tsx   | 19 ++++++++++++++++---
 src/Graph.tsx | 12 +++++++++++-
 2 files changed, 27 insertions(+), 4 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..6eca7c4 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph : boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph : false,
     };
   }
 
@@ -29,7 +31,9 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if (this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
@@ -39,10 +43,19 @@ class App extends Component<{}, IState> {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      let x=0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((serverResponds : ServerRespond[]) => {
+          this.setState({
+            data : serverResponds,
+            showGraph : true
+          });
     });
-  }
-
+    x++;
+    if(x>1000){
+      clearInterval(interval);
+    }
+  },100)
   /**
    * Render the App react component
    */
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..0b96075 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLAnchorElement {
   load: (table: Table) => void,
 }
 
@@ -49,6 +49,16 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivotes', '["stock"]');
+      elem.setAttribute('row-pivotes', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates',
+        {"stock": "distint count,
+          "top_ask_price": "avg",
+          "timestamp": "distinct count"
+        }
+      );
     }
   }
 
-- 
2.39.3 (Apple Git-146)

